'use strict';

module.exports = {
    parserOptions: {
        ecmaVersion: 2020,
    },

    env: {
        es6: true,
        node: true,
        browser: true,
    },

    'extends': [
        'eslint:recommended',
        'plugin:eslint-comments/recommended',
        'plugin:lodash/recommended',
        'plugin:promise/recommended',
        'plugin:node/recommended',
        'plugin:regexp/recommended',
        'plugin:sonarjs/recommended'
    ],

    plugins: [
        'lodash',
        'promise',
        'node',
        'sonarjs',
    ],
    rules: {
        'eslint-comments/disable-enable-pair':   ['warn', { allowWholeFile: true }],
        'eslint-comments/no-aggregating-enable': 'off',
        'eslint-comments/no-duplicate-disable':  'warn',
        'eslint-comments/no-restricted-disable': 'off',
        'eslint-comments/no-unlimited-disable':  'warn',
        'eslint-comments/no-unused-disable':     'warn',
        'eslint-comments/no-unused-enable':      'warn',
        'eslint-comments/no-use':                ['warn', { allow: ['eslint-disable', 'eslint-enable', 'eslint-disable-line', 'eslint-disable-next-line'] }],
        'eslint-comments/require-description':   'warn',

        'lodash/callback-binding':        'warn',
        'lodash/chain-style':             ['warn', 'as-needed'],
        'lodash/chaining':                ['warn', 'always', 2],
        'lodash/collection-method-value': 'warn',
        'lodash/collection-ordering':     'warn',
        'lodash/collection-return':       'warn',
        'lodash/consistent-compose':      ['warn', 'flow'],
        'lodash/identity-shorthand':      ['warn', 'always'],
        'lodash/import-scope':            'off',
        'lodash/matches-prop-shorthand':  'warn',
        'lodash/matches-shorthand':       ['warn', 'always', 3],
        'lodash/no-commit':               'warn',
        'lodash/no-double-unwrap':        'warn',
        'lodash/no-extra-args':           'warn',
        'lodash/no-unbound-this':         'warn',
        'lodash/path-style':              ['warn', 'as-needed'],
        'lodash/prefer-compact':          'warn',
        'lodash/prefer-constant':         'warn',
        'lodash/prefer-filter':           'warn',
        'lodash/prefer-find':             'warn',
        'lodash/prefer-flat-map':         'warn',
        'lodash/prefer-get':              'warn',
        'lodash/prefer-immutable-method': 'warn',
        'lodash/prefer-includes':         ['warn', { includeNative: true }],
        'lodash/prefer-invoke-map':       'warn',
        'lodash/prefer-is-nil':           'off',
        'lodash/prefer-lodash-chain':     'warn',
        'lodash/prefer-lodash-method':    ['warn', { ignoreMethods: ['includes'] }],
        'lodash/prefer-lodash-typecheck': 'warn',
        'lodash/prefer-map':              'warn',
        'lodash/prefer-matches':          ['warn', 3],
        'lodash/prefer-noop':             'warn',
        'lodash/prefer-over-quantifier':  'off',
        'lodash/prefer-reject':           'off',
        'lodash/prefer-some':             ['warn', { includeNative: true }],
        'lodash/prefer-startswith':       'warn',
        'lodash/prefer-thru':             'warn',
        'lodash/prefer-times':            'warn',
        'lodash/prefer-wrapper-method':   'warn',
        'lodash/preferred-alias':         'warn',
        'lodash/prop-shorthand':          ['warn', 'always'],
        'lodash/unwrap':                  'warn',

        // 'promise/always-return':       'warn',
        // 'promise/catch-or-return':     'warn',
        // 'promise/param-names':         'warn',

        'node/exports-style':          ['warn', 'module.exports'],

        'regexp/match-any':                          'warn',
        'regexp/no-assertion-capturing-group':       'warn',
        'regexp/no-dupe-characters-character-class': 'warn',
        'regexp/no-empty-group':                     'warn',
        'regexp/no-empty-lookarounds-assertion':     'warn',
        'regexp/no-escape-backspace':                'warn',
        'regexp/no-invisible-character':             'warn',
        'regexp/no-octal':                           'warn',
        'regexp/no-useless-backreference':           'off', // This rule is a copy of the ESLint core no-useless-backreference rule so useless
        'regexp/no-useless-exactly-quantifier':      'warn',
        'regexp/no-useless-two-nums-quantifier':     'warn',
        'regexp/prefer-d':                           'warn',
        'regexp/prefer-plus-quantifier':             'warn',
        'regexp/prefer-question-quantifier':         'warn',
        'regexp/prefer-star-quantifier':             'warn',
        'regexp/prefer-t':                           'warn',
        'regexp/prefer-w':                           'warn',

        'sonarjs/no-duplicate-string':    'warn',
        'sonarjs/no-identical-functions': 'warn',

        'array-bracket-spacing':       ['warn', 'never', { arraysInArrays: false, objectsInArrays: false }],
        'array-callback-return':       'warn',
        'arrow-spacing':               ['warn', { before: true, after: true }],
        'block-scoped-var':            'error',
        'block-spacing':               ['warn', 'always'],
        'brace-style':                 ['warn', '1tbs', { allowSingleLine: true }],
        'callback-return':             ['error', ['callback', 'cb', 'next', 'done']],
        'comma-dangle':                ['warn', { objects: 'only-multiline', arrays: 'only-multiline', functions: 'never', imports: 'never', exports: 'never' }],
        'comma-spacing':               ['warn', { before: false, after: true }],
        'comma-style':                 ['error', 'last'],
        complexity:                    ['warn', 15],
        curly:                         ['warn', 'all'],
        'default-case-last':           'warn',
        'default-param-last':          'error',
        'dot-notation':                'warn',
        'eol-last':                    'warn',
        'handle-callback-err':         'warn',
        'keyword-spacing':             ['warn', {
            before: true,
            after:  true,
            overrides:
            {
                'if':       { after: false },
                'for':      { after: false },
                'while':    { after: false },
                'continue': { after: false },
                'catch':    { after: false },
                'switch':   { after: false },
            },
        }],
        'linebreak-style':             ['warn', 'unix'],
        'no-bitwise':                  'warn',
        'no-confusing-arrow':          'warn',
        'no-console' :                 'warn',
        'no-const-assign':             'error',
        'no-constant-binary-expression': 'warn',
        'no-constructor-return':       'warn',
        'no-control-regex':            'off',
        'no-delete-var':               'error',
        'no-dupe-args':                'warn',
        'no-dupe-else-if':             'error',
        'no-dupe-keys':                'warn',
        'no-duplicate-case':           'warn',
        'no-eval':                     'warn',
        'no-fallthrough':              'warn',
        'no-implied-eval':             'warn',
        'no-loop-func':                'error',
        'no-negated-in-lhs':           'warn',
        'no-nested-ternary':           'error',
        'no-param-reassign':           ['warn', { props: false }],
        'no-path-concat':              'error',
        'no-redeclare':                ['error', { builtinGlobals: true }],
        'no-return-assign':            ['error', 'always'],
        'no-self-compare':             'error',
        'no-sequences':                'error',
        'no-spaced-func':              'warn',
        'no-sync':                     'warn',
        'no-trailing-spaces':          'warn',
        'no-unexpected-multiline':     'error',
        'no-unmodified-loop-condition':'error',
        'no-unneeded-ternary':         'error',
        'no-unreachable':              'error',
        'no-unused-expressions':       ['error', { allowShortCircuit: true, allowTernary: true }],
        'no-unused-vars':              ['warn', { args: 'after-used' }],
        'no-use-before-define':        ['error', 'nofunc'],
        'no-useless-call':             'error',
        'no-useless-concat':           'error',
        'no-useless-escape':           'error',
        'no-var':                      'warn',
        'no-warning-comments':         ['warn', { terms: ['todo', 'fixme', 'xxx'], location: 'anywhere' }],
        'object-curly-spacing':        ['warn', 'always', { arraysInObjects: true }],
        'padded-blocks':               ['warn', 'never'],
        'prefer-arrow-callback':       ['warn', { allowNamedFunctions: true }],
        'prefer-const':                'warn',
        'quote-props':                 ['warn', 'as-needed', { keywords: true, numbers: true }],
        quotes:                        ['warn', 'single', 'avoid-escape'],
        semi:                          ['error', 'always'],
        'semi-spacing':                ['error', { before: false, after: true }],
        'space-before-blocks':         ['warn', { functions: 'always', keywords: 'always' }],
        'space-before-function-paren': ['warn', { anonymous: 'never', named: 'never', asyncArrow: 'always' }],
        'space-in-parens':             ['warn', 'never'],
        'space-infix-ops':             'warn',
        'space-unary-ops':             ['warn', { words: true, nonwords: false }],
        strict:                        ['warn', 'global'],
        'use-isnan':                   'error',
        'valid-typeof':                'warn',
    },
};
