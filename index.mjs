import js        from '@eslint/js';
import n         from 'eslint-plugin-n';
import lodash    from 'eslint-plugin-lodash';
import promise   from 'eslint-plugin-promise';
import comments  from 'eslint-plugin-eslint-comments';
import regexp    from 'eslint-plugin-regexp';
import stylistic from '@stylistic/eslint-plugin';
import globals   from 'globals';

const recommendedRules = {
    'eslint-comments/disable-enable-pair': ['warn', { allowWholeFile: true }],
    'eslint-comments/no-aggregating-enable': 'off',
    'eslint-comments/no-duplicate-disable': 'warn',
    'eslint-comments/no-restricted-disable': 'off',
    'eslint-comments/no-unlimited-disable': 'warn',
    'eslint-comments/no-unused-disable': 'warn',
    'eslint-comments/no-unused-enable': 'warn',
    'eslint-comments/no-use': ['warn', { allow: ['eslint-disable', 'eslint-enable', 'eslint-disable-line', 'eslint-disable-next-line'] }],
    'eslint-comments/require-description': 'warn',

    'lodash/callback-binding': 'warn',
    'lodash/chain-style': ['warn', 'as-needed'],
    'lodash/chaining': ['warn', 'always', 2],
    'lodash/collection-method-value': 'warn',
    'lodash/collection-ordering': 'warn',
    'lodash/collection-return': 'warn',
    'lodash/consistent-compose': ['warn', 'flow'],
    'lodash/identity-shorthand': ['warn', 'always'],
    'lodash/import-scope': 'off',
    'lodash/matches-prop-shorthand': 'warn',
    'lodash/matches-shorthand': ['warn', 'always', 3],
    'lodash/no-commit': 'warn',
    'lodash/no-double-unwrap': 'warn',
    'lodash/no-extra-args': 'warn',
    'lodash/no-unbound-this': 'warn',
    'lodash/path-style': ['warn', 'as-needed'],
    'lodash/prefer-compact': 'warn',
    'lodash/prefer-constant': 'warn',
    'lodash/prefer-filter': 'warn',
    'lodash/prefer-find': 'warn',
    'lodash/prefer-flat-map': 'warn',
    'lodash/prefer-get': 'warn',
    'lodash/prefer-immutable-method': 'warn',
    'lodash/prefer-includes': ['warn', { includeNative: true }],
    'lodash/prefer-invoke-map': 'warn',
    'lodash/prefer-is-nil': 'off',
    'lodash/prefer-lodash-chain': 'warn',
    'lodash/prefer-lodash-method': ['warn', { ignoreMethods: ['includes'] }],
    'lodash/prefer-lodash-typecheck': 'warn',
    'lodash/prefer-map': 'warn',
    'lodash/prefer-matches': ['warn', 3],
    'lodash/prefer-noop': 'warn',
    'lodash/prefer-over-quantifier': 'off',
    'lodash/prefer-reject': 'off',
    'lodash/prefer-some': ['warn', { includeNative: true }],
    'lodash/prefer-startswith': 'warn',
    'lodash/prefer-thru': 'warn',
    'lodash/prefer-times': 'warn',
    'lodash/prefer-wrapper-method': 'warn',
    'lodash/preferred-alias': 'warn',
    'lodash/prop-shorthand': ['warn', 'always'],
    'lodash/unwrap': 'warn',

    'n/callback-return': ['error', ['callback', 'cb', 'next', 'done']],
    'n/handle-callback-err': 'warn',
    'n/no-extraneous-import': 'off',
    'n/no-path-concat': 'error',
    'n/no-sync': 'warn',

    // 'promise/always-return':       'warn',
    // 'promise/catch-or-return':     'warn',
    // 'promise/param-names':         'warn',

    'regexp/match-any': 'warn',
    'regexp/no-dupe-characters-character-class': 'warn',
    'regexp/no-empty-group': 'warn',
    'regexp/no-empty-lookarounds-assertion': 'warn',
    'regexp/no-escape-backspace': 'warn',
    'regexp/no-invisible-character': 'warn',
    'regexp/no-octal': 'warn',
    'regexp/no-useless-backreference': 'off', // This rule is a copy of the ESLint core no-useless-backreference rule so useless
    'regexp/no-useless-two-nums-quantifier': 'warn',
    'regexp/prefer-d': 'warn',
    'regexp/prefer-plus-quantifier': 'warn',
    'regexp/prefer-question-quantifier': 'warn',
    'regexp/prefer-star-quantifier': 'warn',
    'regexp/prefer-w': 'warn',

    '@stylistic/array-bracket-spacing': ['warn', 'never', { arraysInArrays: false, objectsInArrays: false }],
    '@stylistic/arrow-spacing': ['warn', { before: true, after: true }],
    '@stylistic/block-spacing': ['warn', 'always'],
    '@stylistic/brace-style': ['warn', '1tbs', { allowSingleLine: true }],
    '@stylistic/comma-dangle': ['warn', { objects: 'only-multiline', arrays: 'only-multiline', functions: 'never', imports: 'never', exports: 'never' }],
    '@stylistic/comma-spacing': ['warn', { before: false, after: true }],
    '@stylistic/comma-style': ['error', 'last'],
    '@stylistic/eol-last': 'warn',
    '@stylistic/func-call-spacing': 'warn',
    '@stylistic/indent': ['warn', 4, { SwitchCase: 1 }],
    '@stylistic/keyword-spacing': ['warn', {
        before: true,
        after: true,
        overrides:
        {
            'if': { after: false },
            'for': { after: false },
            'while': { after: false },
            'continue': { after: false },
            'catch': { after: false },
            'switch': { after: false },
        },
    }],
    '@stylistic/linebreak-style': ['warn', 'unix'],
    '@stylistic/no-confusing-arrow': 'warn',
    '@stylistic/no-multi-spaces': ['off', { ignoreEOLComments: true }],
    '@stylistic/no-trailing-spaces': 'warn',
    '@stylistic/object-curly-spacing': ['warn', 'always', { arraysInObjects: true }],
    '@stylistic/padded-blocks': ['warn', 'never'],
    '@stylistic/quote-props': ['warn', 'as-needed', { keywords: true, numbers: true }],
    '@stylistic/quotes': ['warn', 'single', 'avoid-escape'],
    '@stylistic/semi': ['error', 'always'],
    '@stylistic/semi-spacing': ['error', { before: false, after: true }],
    '@stylistic/space-before-blocks': ['warn', { functions: 'always', keywords: 'always' }],
    '@stylistic/space-before-function-paren': ['warn', { anonymous: 'never', named: 'never', asyncArrow: 'always' }],
    '@stylistic/space-in-parens': ['warn', 'never'],
    '@stylistic/space-infix-ops': 'warn',
    '@stylistic/space-unary-ops': ['warn', { words: true, nonwords: false }],

    'array-callback-return': 'warn',
    'block-scoped-var': 'error',
    complexity: ['warn', 15],
    curly: ['warn', 'all'],
    'default-case-last': 'warn',
    'default-param-last': 'error',
    'dot-notation': 'warn',
    'no-bitwise': 'warn',
    'no-console': 'warn',
    'no-const-assign': 'error',
    'no-constant-binary-expression': 'warn',
    'no-constructor-return': 'warn',
    'no-control-regex': 'off',
    'no-delete-var': 'error',
    'no-dupe-args': 'warn',
    'no-dupe-else-if': 'error',
    'no-dupe-keys': 'warn',
    'no-duplicate-case': 'warn',
    'no-eval': 'warn',
    'no-fallthrough': 'warn',
    'no-implied-eval': 'warn',
    'no-loop-func': 'error',
    'no-nested-ternary': 'error',
    'no-param-reassign': ['warn', { props: false }],
    'no-redeclare': ['error', { builtinGlobals: true }],
    'no-return-assign': ['error', 'always'],
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-unexpected-multiline': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unneeded-ternary': 'error',
    'no-unreachable': 'error',
    'no-unsafe-negation': 'warn',
    'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true }],
    'no-unused-vars': ['warn', { args: 'after-used' }],
    'no-use-before-define': ['error', 'nofunc'],
    'no-useless-call': 'error',
    'no-useless-concat': 'error',
    'no-useless-escape': 'error',
    'no-var': 'warn',
    'no-warning-comments': ['warn', { terms: ['todo', 'fixme', 'xxx'], location: 'anywhere' }],
    'prefer-arrow-callback': ['warn', { allowNamedFunctions: true }],
    'prefer-const': 'warn',
    strict: ['warn', 'global'],
    'use-isnan': 'error',
    'valid-typeof': 'warn',
};

export default {
    configs: {
        recommended: {
            languageOptions: {
                globals: {
                    ...globals.node,
                },
            },
            plugins: { js, '@stylistic': stylistic, n, lodash, promise, 'eslint-comments': comments, regexp },
            rules: {
                ...(js.configs.recommended.rules),
                ...(stylistic.configs['recommended-flat'].rules),
                ...(n.configs.recommended.rules),
                ...(lodash.configs.recommended.rules),
                ...(promise.configs.recommended.rules),
                ...(comments.configs.recommended.rules),
                ...(regexp.configs.recommended.rules),
                ...recommendedRules,
            },
        },
    },
};
